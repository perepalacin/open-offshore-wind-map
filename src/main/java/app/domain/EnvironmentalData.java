/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EnvironmentalData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1107643769464633566L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EnvironmentalData\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"platformId\",\"type\":\"long\"},{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"waveHeight\",\"type\":\"double\"},{\"name\":\"wavePeriod\",\"type\":\"double\"},{\"name\":\"waterTemperature\",\"type\":\"double\"},{\"name\":\"airHumidity\",\"type\":\"double\"},{\"name\":\"windSpeed\",\"type\":\"double\"},{\"name\":\"windDirection\",\"type\":\"double\"},{\"name\":\"seaCurrentDirectionSurface\",\"type\":\"double\"},{\"name\":\"seaCurrentSpeedSurface\",\"type\":\"double\"},{\"name\":\"seaCurrentDirection5m\",\"type\":\"double\"},{\"name\":\"seaCurrentSpeed5m\",\"type\":\"double\"},{\"name\":\"seaCurrentDirection10m\",\"type\":\"double\"},{\"name\":\"seaCurrentSpeed10m\",\"type\":\"double\"},{\"name\":\"seaCurrentDirection15m\",\"type\":\"double\"},{\"name\":\"seaCurrentSpeed15m\",\"type\":\"double\"},{\"name\":\"waterGap\",\"type\":\"double\"},{\"name\":\"atmosphericPressure\",\"type\":\"double\"},{\"name\":\"waterSalinity\",\"type\":\"double\"},{\"name\":\"phLevel\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EnvironmentalData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EnvironmentalData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EnvironmentalData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EnvironmentalData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EnvironmentalData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EnvironmentalData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EnvironmentalData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EnvironmentalData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EnvironmentalData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private long platformId;
  private long timestamp;
  private double waveHeight;
  private double wavePeriod;
  private double waterTemperature;
  private double airHumidity;
  private double windSpeed;
  private double windDirection;
  private double seaCurrentDirectionSurface;
  private double seaCurrentSpeedSurface;
  private double seaCurrentDirection5m;
  private double seaCurrentSpeed5m;
  private double seaCurrentDirection10m;
  private double seaCurrentSpeed10m;
  private double seaCurrentDirection15m;
  private double seaCurrentSpeed15m;
  private double waterGap;
  private double atmosphericPressure;
  private double waterSalinity;
  private float phLevel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EnvironmentalData() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param platformId The new value for platformId
   * @param timestamp The new value for timestamp
   * @param waveHeight The new value for waveHeight
   * @param wavePeriod The new value for wavePeriod
   * @param waterTemperature The new value for waterTemperature
   * @param airHumidity The new value for airHumidity
   * @param windSpeed The new value for windSpeed
   * @param windDirection The new value for windDirection
   * @param seaCurrentDirectionSurface The new value for seaCurrentDirectionSurface
   * @param seaCurrentSpeedSurface The new value for seaCurrentSpeedSurface
   * @param seaCurrentDirection5m The new value for seaCurrentDirection5m
   * @param seaCurrentSpeed5m The new value for seaCurrentSpeed5m
   * @param seaCurrentDirection10m The new value for seaCurrentDirection10m
   * @param seaCurrentSpeed10m The new value for seaCurrentSpeed10m
   * @param seaCurrentDirection15m The new value for seaCurrentDirection15m
   * @param seaCurrentSpeed15m The new value for seaCurrentSpeed15m
   * @param waterGap The new value for waterGap
   * @param atmosphericPressure The new value for atmosphericPressure
   * @param waterSalinity The new value for waterSalinity
   * @param phLevel The new value for phLevel
   */
  public EnvironmentalData(java.lang.Long id, java.lang.Long platformId, java.lang.Long timestamp, java.lang.Double waveHeight, java.lang.Double wavePeriod, java.lang.Double waterTemperature, java.lang.Double airHumidity, java.lang.Double windSpeed, java.lang.Double windDirection, java.lang.Double seaCurrentDirectionSurface, java.lang.Double seaCurrentSpeedSurface, java.lang.Double seaCurrentDirection5m, java.lang.Double seaCurrentSpeed5m, java.lang.Double seaCurrentDirection10m, java.lang.Double seaCurrentSpeed10m, java.lang.Double seaCurrentDirection15m, java.lang.Double seaCurrentSpeed15m, java.lang.Double waterGap, java.lang.Double atmosphericPressure, java.lang.Double waterSalinity, java.lang.Float phLevel) {
    this.id = id;
    this.platformId = platformId;
    this.timestamp = timestamp;
    this.waveHeight = waveHeight;
    this.wavePeriod = wavePeriod;
    this.waterTemperature = waterTemperature;
    this.airHumidity = airHumidity;
    this.windSpeed = windSpeed;
    this.windDirection = windDirection;
    this.seaCurrentDirectionSurface = seaCurrentDirectionSurface;
    this.seaCurrentSpeedSurface = seaCurrentSpeedSurface;
    this.seaCurrentDirection5m = seaCurrentDirection5m;
    this.seaCurrentSpeed5m = seaCurrentSpeed5m;
    this.seaCurrentDirection10m = seaCurrentDirection10m;
    this.seaCurrentSpeed10m = seaCurrentSpeed10m;
    this.seaCurrentDirection15m = seaCurrentDirection15m;
    this.seaCurrentSpeed15m = seaCurrentSpeed15m;
    this.waterGap = waterGap;
    this.atmosphericPressure = atmosphericPressure;
    this.waterSalinity = waterSalinity;
    this.phLevel = phLevel;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return platformId;
    case 2: return timestamp;
    case 3: return waveHeight;
    case 4: return wavePeriod;
    case 5: return waterTemperature;
    case 6: return airHumidity;
    case 7: return windSpeed;
    case 8: return windDirection;
    case 9: return seaCurrentDirectionSurface;
    case 10: return seaCurrentSpeedSurface;
    case 11: return seaCurrentDirection5m;
    case 12: return seaCurrentSpeed5m;
    case 13: return seaCurrentDirection10m;
    case 14: return seaCurrentSpeed10m;
    case 15: return seaCurrentDirection15m;
    case 16: return seaCurrentSpeed15m;
    case 17: return waterGap;
    case 18: return atmosphericPressure;
    case 19: return waterSalinity;
    case 20: return phLevel;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: platformId = (java.lang.Long)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: waveHeight = (java.lang.Double)value$; break;
    case 4: wavePeriod = (java.lang.Double)value$; break;
    case 5: waterTemperature = (java.lang.Double)value$; break;
    case 6: airHumidity = (java.lang.Double)value$; break;
    case 7: windSpeed = (java.lang.Double)value$; break;
    case 8: windDirection = (java.lang.Double)value$; break;
    case 9: seaCurrentDirectionSurface = (java.lang.Double)value$; break;
    case 10: seaCurrentSpeedSurface = (java.lang.Double)value$; break;
    case 11: seaCurrentDirection5m = (java.lang.Double)value$; break;
    case 12: seaCurrentSpeed5m = (java.lang.Double)value$; break;
    case 13: seaCurrentDirection10m = (java.lang.Double)value$; break;
    case 14: seaCurrentSpeed10m = (java.lang.Double)value$; break;
    case 15: seaCurrentDirection15m = (java.lang.Double)value$; break;
    case 16: seaCurrentSpeed15m = (java.lang.Double)value$; break;
    case 17: waterGap = (java.lang.Double)value$; break;
    case 18: atmosphericPressure = (java.lang.Double)value$; break;
    case 19: waterSalinity = (java.lang.Double)value$; break;
    case 20: phLevel = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'platformId' field.
   * @return The value of the 'platformId' field.
   */
  public long getPlatformId() {
    return platformId;
  }


  /**
   * Sets the value of the 'platformId' field.
   * @param value the value to set.
   */
  public void setPlatformId(long value) {
    this.platformId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'waveHeight' field.
   * @return The value of the 'waveHeight' field.
   */
  public double getWaveHeight() {
    return waveHeight;
  }


  /**
   * Sets the value of the 'waveHeight' field.
   * @param value the value to set.
   */
  public void setWaveHeight(double value) {
    this.waveHeight = value;
  }

  /**
   * Gets the value of the 'wavePeriod' field.
   * @return The value of the 'wavePeriod' field.
   */
  public double getWavePeriod() {
    return wavePeriod;
  }


  /**
   * Sets the value of the 'wavePeriod' field.
   * @param value the value to set.
   */
  public void setWavePeriod(double value) {
    this.wavePeriod = value;
  }

  /**
   * Gets the value of the 'waterTemperature' field.
   * @return The value of the 'waterTemperature' field.
   */
  public double getWaterTemperature() {
    return waterTemperature;
  }


  /**
   * Sets the value of the 'waterTemperature' field.
   * @param value the value to set.
   */
  public void setWaterTemperature(double value) {
    this.waterTemperature = value;
  }

  /**
   * Gets the value of the 'airHumidity' field.
   * @return The value of the 'airHumidity' field.
   */
  public double getAirHumidity() {
    return airHumidity;
  }


  /**
   * Sets the value of the 'airHumidity' field.
   * @param value the value to set.
   */
  public void setAirHumidity(double value) {
    this.airHumidity = value;
  }

  /**
   * Gets the value of the 'windSpeed' field.
   * @return The value of the 'windSpeed' field.
   */
  public double getWindSpeed() {
    return windSpeed;
  }


  /**
   * Sets the value of the 'windSpeed' field.
   * @param value the value to set.
   */
  public void setWindSpeed(double value) {
    this.windSpeed = value;
  }

  /**
   * Gets the value of the 'windDirection' field.
   * @return The value of the 'windDirection' field.
   */
  public double getWindDirection() {
    return windDirection;
  }


  /**
   * Sets the value of the 'windDirection' field.
   * @param value the value to set.
   */
  public void setWindDirection(double value) {
    this.windDirection = value;
  }

  /**
   * Gets the value of the 'seaCurrentDirectionSurface' field.
   * @return The value of the 'seaCurrentDirectionSurface' field.
   */
  public double getSeaCurrentDirectionSurface() {
    return seaCurrentDirectionSurface;
  }


  /**
   * Sets the value of the 'seaCurrentDirectionSurface' field.
   * @param value the value to set.
   */
  public void setSeaCurrentDirectionSurface(double value) {
    this.seaCurrentDirectionSurface = value;
  }

  /**
   * Gets the value of the 'seaCurrentSpeedSurface' field.
   * @return The value of the 'seaCurrentSpeedSurface' field.
   */
  public double getSeaCurrentSpeedSurface() {
    return seaCurrentSpeedSurface;
  }


  /**
   * Sets the value of the 'seaCurrentSpeedSurface' field.
   * @param value the value to set.
   */
  public void setSeaCurrentSpeedSurface(double value) {
    this.seaCurrentSpeedSurface = value;
  }

  /**
   * Gets the value of the 'seaCurrentDirection5m' field.
   * @return The value of the 'seaCurrentDirection5m' field.
   */
  public double getSeaCurrentDirection5m() {
    return seaCurrentDirection5m;
  }


  /**
   * Sets the value of the 'seaCurrentDirection5m' field.
   * @param value the value to set.
   */
  public void setSeaCurrentDirection5m(double value) {
    this.seaCurrentDirection5m = value;
  }

  /**
   * Gets the value of the 'seaCurrentSpeed5m' field.
   * @return The value of the 'seaCurrentSpeed5m' field.
   */
  public double getSeaCurrentSpeed5m() {
    return seaCurrentSpeed5m;
  }


  /**
   * Sets the value of the 'seaCurrentSpeed5m' field.
   * @param value the value to set.
   */
  public void setSeaCurrentSpeed5m(double value) {
    this.seaCurrentSpeed5m = value;
  }

  /**
   * Gets the value of the 'seaCurrentDirection10m' field.
   * @return The value of the 'seaCurrentDirection10m' field.
   */
  public double getSeaCurrentDirection10m() {
    return seaCurrentDirection10m;
  }


  /**
   * Sets the value of the 'seaCurrentDirection10m' field.
   * @param value the value to set.
   */
  public void setSeaCurrentDirection10m(double value) {
    this.seaCurrentDirection10m = value;
  }

  /**
   * Gets the value of the 'seaCurrentSpeed10m' field.
   * @return The value of the 'seaCurrentSpeed10m' field.
   */
  public double getSeaCurrentSpeed10m() {
    return seaCurrentSpeed10m;
  }


  /**
   * Sets the value of the 'seaCurrentSpeed10m' field.
   * @param value the value to set.
   */
  public void setSeaCurrentSpeed10m(double value) {
    this.seaCurrentSpeed10m = value;
  }

  /**
   * Gets the value of the 'seaCurrentDirection15m' field.
   * @return The value of the 'seaCurrentDirection15m' field.
   */
  public double getSeaCurrentDirection15m() {
    return seaCurrentDirection15m;
  }


  /**
   * Sets the value of the 'seaCurrentDirection15m' field.
   * @param value the value to set.
   */
  public void setSeaCurrentDirection15m(double value) {
    this.seaCurrentDirection15m = value;
  }

  /**
   * Gets the value of the 'seaCurrentSpeed15m' field.
   * @return The value of the 'seaCurrentSpeed15m' field.
   */
  public double getSeaCurrentSpeed15m() {
    return seaCurrentSpeed15m;
  }


  /**
   * Sets the value of the 'seaCurrentSpeed15m' field.
   * @param value the value to set.
   */
  public void setSeaCurrentSpeed15m(double value) {
    this.seaCurrentSpeed15m = value;
  }

  /**
   * Gets the value of the 'waterGap' field.
   * @return The value of the 'waterGap' field.
   */
  public double getWaterGap() {
    return waterGap;
  }


  /**
   * Sets the value of the 'waterGap' field.
   * @param value the value to set.
   */
  public void setWaterGap(double value) {
    this.waterGap = value;
  }

  /**
   * Gets the value of the 'atmosphericPressure' field.
   * @return The value of the 'atmosphericPressure' field.
   */
  public double getAtmosphericPressure() {
    return atmosphericPressure;
  }


  /**
   * Sets the value of the 'atmosphericPressure' field.
   * @param value the value to set.
   */
  public void setAtmosphericPressure(double value) {
    this.atmosphericPressure = value;
  }

  /**
   * Gets the value of the 'waterSalinity' field.
   * @return The value of the 'waterSalinity' field.
   */
  public double getWaterSalinity() {
    return waterSalinity;
  }


  /**
   * Sets the value of the 'waterSalinity' field.
   * @param value the value to set.
   */
  public void setWaterSalinity(double value) {
    this.waterSalinity = value;
  }

  /**
   * Gets the value of the 'phLevel' field.
   * @return The value of the 'phLevel' field.
   */
  public float getPhLevel() {
    return phLevel;
  }


  /**
   * Sets the value of the 'phLevel' field.
   * @param value the value to set.
   */
  public void setPhLevel(float value) {
    this.phLevel = value;
  }

  /**
   * Creates a new EnvironmentalData RecordBuilder.
   * @return A new EnvironmentalData RecordBuilder
   */
  public static EnvironmentalData.Builder newBuilder() {
    return new EnvironmentalData.Builder();
  }

  /**
   * Creates a new EnvironmentalData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EnvironmentalData RecordBuilder
   */
  public static EnvironmentalData.Builder newBuilder(EnvironmentalData.Builder other) {
    if (other == null) {
      return new EnvironmentalData.Builder();
    } else {
      return new EnvironmentalData.Builder(other);
    }
  }

  /**
   * Creates a new EnvironmentalData RecordBuilder by copying an existing EnvironmentalData instance.
   * @param other The existing instance to copy.
   * @return A new EnvironmentalData RecordBuilder
   */
  public static EnvironmentalData.Builder newBuilder(EnvironmentalData other) {
    if (other == null) {
      return new EnvironmentalData.Builder();
    } else {
      return new EnvironmentalData.Builder(other);
    }
  }

  /**
   * RecordBuilder for EnvironmentalData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EnvironmentalData>
    implements org.apache.avro.data.RecordBuilder<EnvironmentalData> {

    private long id;
    private long platformId;
    private long timestamp;
    private double waveHeight;
    private double wavePeriod;
    private double waterTemperature;
    private double airHumidity;
    private double windSpeed;
    private double windDirection;
    private double seaCurrentDirectionSurface;
    private double seaCurrentSpeedSurface;
    private double seaCurrentDirection5m;
    private double seaCurrentSpeed5m;
    private double seaCurrentDirection10m;
    private double seaCurrentSpeed10m;
    private double seaCurrentDirection15m;
    private double seaCurrentSpeed15m;
    private double waterGap;
    private double atmosphericPressure;
    private double waterSalinity;
    private float phLevel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EnvironmentalData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.platformId)) {
        this.platformId = data().deepCopy(fields()[1].schema(), other.platformId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.waveHeight)) {
        this.waveHeight = data().deepCopy(fields()[3].schema(), other.waveHeight);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.wavePeriod)) {
        this.wavePeriod = data().deepCopy(fields()[4].schema(), other.wavePeriod);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.waterTemperature)) {
        this.waterTemperature = data().deepCopy(fields()[5].schema(), other.waterTemperature);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.airHumidity)) {
        this.airHumidity = data().deepCopy(fields()[6].schema(), other.airHumidity);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.windSpeed)) {
        this.windSpeed = data().deepCopy(fields()[7].schema(), other.windSpeed);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.windDirection)) {
        this.windDirection = data().deepCopy(fields()[8].schema(), other.windDirection);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.seaCurrentDirectionSurface)) {
        this.seaCurrentDirectionSurface = data().deepCopy(fields()[9].schema(), other.seaCurrentDirectionSurface);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.seaCurrentSpeedSurface)) {
        this.seaCurrentSpeedSurface = data().deepCopy(fields()[10].schema(), other.seaCurrentSpeedSurface);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.seaCurrentDirection5m)) {
        this.seaCurrentDirection5m = data().deepCopy(fields()[11].schema(), other.seaCurrentDirection5m);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.seaCurrentSpeed5m)) {
        this.seaCurrentSpeed5m = data().deepCopy(fields()[12].schema(), other.seaCurrentSpeed5m);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.seaCurrentDirection10m)) {
        this.seaCurrentDirection10m = data().deepCopy(fields()[13].schema(), other.seaCurrentDirection10m);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.seaCurrentSpeed10m)) {
        this.seaCurrentSpeed10m = data().deepCopy(fields()[14].schema(), other.seaCurrentSpeed10m);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.seaCurrentDirection15m)) {
        this.seaCurrentDirection15m = data().deepCopy(fields()[15].schema(), other.seaCurrentDirection15m);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.seaCurrentSpeed15m)) {
        this.seaCurrentSpeed15m = data().deepCopy(fields()[16].schema(), other.seaCurrentSpeed15m);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.waterGap)) {
        this.waterGap = data().deepCopy(fields()[17].schema(), other.waterGap);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.atmosphericPressure)) {
        this.atmosphericPressure = data().deepCopy(fields()[18].schema(), other.atmosphericPressure);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.waterSalinity)) {
        this.waterSalinity = data().deepCopy(fields()[19].schema(), other.waterSalinity);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.phLevel)) {
        this.phLevel = data().deepCopy(fields()[20].schema(), other.phLevel);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
    }

    /**
     * Creates a Builder by copying an existing EnvironmentalData instance
     * @param other The existing instance to copy.
     */
    private Builder(EnvironmentalData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.platformId)) {
        this.platformId = data().deepCopy(fields()[1].schema(), other.platformId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.waveHeight)) {
        this.waveHeight = data().deepCopy(fields()[3].schema(), other.waveHeight);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.wavePeriod)) {
        this.wavePeriod = data().deepCopy(fields()[4].schema(), other.wavePeriod);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.waterTemperature)) {
        this.waterTemperature = data().deepCopy(fields()[5].schema(), other.waterTemperature);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.airHumidity)) {
        this.airHumidity = data().deepCopy(fields()[6].schema(), other.airHumidity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.windSpeed)) {
        this.windSpeed = data().deepCopy(fields()[7].schema(), other.windSpeed);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.windDirection)) {
        this.windDirection = data().deepCopy(fields()[8].schema(), other.windDirection);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.seaCurrentDirectionSurface)) {
        this.seaCurrentDirectionSurface = data().deepCopy(fields()[9].schema(), other.seaCurrentDirectionSurface);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.seaCurrentSpeedSurface)) {
        this.seaCurrentSpeedSurface = data().deepCopy(fields()[10].schema(), other.seaCurrentSpeedSurface);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.seaCurrentDirection5m)) {
        this.seaCurrentDirection5m = data().deepCopy(fields()[11].schema(), other.seaCurrentDirection5m);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.seaCurrentSpeed5m)) {
        this.seaCurrentSpeed5m = data().deepCopy(fields()[12].schema(), other.seaCurrentSpeed5m);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.seaCurrentDirection10m)) {
        this.seaCurrentDirection10m = data().deepCopy(fields()[13].schema(), other.seaCurrentDirection10m);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.seaCurrentSpeed10m)) {
        this.seaCurrentSpeed10m = data().deepCopy(fields()[14].schema(), other.seaCurrentSpeed10m);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.seaCurrentDirection15m)) {
        this.seaCurrentDirection15m = data().deepCopy(fields()[15].schema(), other.seaCurrentDirection15m);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.seaCurrentSpeed15m)) {
        this.seaCurrentSpeed15m = data().deepCopy(fields()[16].schema(), other.seaCurrentSpeed15m);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.waterGap)) {
        this.waterGap = data().deepCopy(fields()[17].schema(), other.waterGap);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.atmosphericPressure)) {
        this.atmosphericPressure = data().deepCopy(fields()[18].schema(), other.atmosphericPressure);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.waterSalinity)) {
        this.waterSalinity = data().deepCopy(fields()[19].schema(), other.waterSalinity);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.phLevel)) {
        this.phLevel = data().deepCopy(fields()[20].schema(), other.phLevel);
        fieldSetFlags()[20] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'platformId' field.
      * @return The value.
      */
    public long getPlatformId() {
      return platformId;
    }


    /**
      * Sets the value of the 'platformId' field.
      * @param value The value of 'platformId'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setPlatformId(long value) {
      validate(fields()[1], value);
      this.platformId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'platformId' field has been set.
      * @return True if the 'platformId' field has been set, false otherwise.
      */
    public boolean hasPlatformId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'platformId' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearPlatformId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'waveHeight' field.
      * @return The value.
      */
    public double getWaveHeight() {
      return waveHeight;
    }


    /**
      * Sets the value of the 'waveHeight' field.
      * @param value The value of 'waveHeight'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setWaveHeight(double value) {
      validate(fields()[3], value);
      this.waveHeight = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'waveHeight' field has been set.
      * @return True if the 'waveHeight' field has been set, false otherwise.
      */
    public boolean hasWaveHeight() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'waveHeight' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearWaveHeight() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'wavePeriod' field.
      * @return The value.
      */
    public double getWavePeriod() {
      return wavePeriod;
    }


    /**
      * Sets the value of the 'wavePeriod' field.
      * @param value The value of 'wavePeriod'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setWavePeriod(double value) {
      validate(fields()[4], value);
      this.wavePeriod = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'wavePeriod' field has been set.
      * @return True if the 'wavePeriod' field has been set, false otherwise.
      */
    public boolean hasWavePeriod() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'wavePeriod' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearWavePeriod() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'waterTemperature' field.
      * @return The value.
      */
    public double getWaterTemperature() {
      return waterTemperature;
    }


    /**
      * Sets the value of the 'waterTemperature' field.
      * @param value The value of 'waterTemperature'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setWaterTemperature(double value) {
      validate(fields()[5], value);
      this.waterTemperature = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'waterTemperature' field has been set.
      * @return True if the 'waterTemperature' field has been set, false otherwise.
      */
    public boolean hasWaterTemperature() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'waterTemperature' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearWaterTemperature() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'airHumidity' field.
      * @return The value.
      */
    public double getAirHumidity() {
      return airHumidity;
    }


    /**
      * Sets the value of the 'airHumidity' field.
      * @param value The value of 'airHumidity'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setAirHumidity(double value) {
      validate(fields()[6], value);
      this.airHumidity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'airHumidity' field has been set.
      * @return True if the 'airHumidity' field has been set, false otherwise.
      */
    public boolean hasAirHumidity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'airHumidity' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearAirHumidity() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'windSpeed' field.
      * @return The value.
      */
    public double getWindSpeed() {
      return windSpeed;
    }


    /**
      * Sets the value of the 'windSpeed' field.
      * @param value The value of 'windSpeed'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setWindSpeed(double value) {
      validate(fields()[7], value);
      this.windSpeed = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'windSpeed' field has been set.
      * @return True if the 'windSpeed' field has been set, false otherwise.
      */
    public boolean hasWindSpeed() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'windSpeed' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearWindSpeed() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'windDirection' field.
      * @return The value.
      */
    public double getWindDirection() {
      return windDirection;
    }


    /**
      * Sets the value of the 'windDirection' field.
      * @param value The value of 'windDirection'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setWindDirection(double value) {
      validate(fields()[8], value);
      this.windDirection = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'windDirection' field has been set.
      * @return True if the 'windDirection' field has been set, false otherwise.
      */
    public boolean hasWindDirection() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'windDirection' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearWindDirection() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'seaCurrentDirectionSurface' field.
      * @return The value.
      */
    public double getSeaCurrentDirectionSurface() {
      return seaCurrentDirectionSurface;
    }


    /**
      * Sets the value of the 'seaCurrentDirectionSurface' field.
      * @param value The value of 'seaCurrentDirectionSurface'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setSeaCurrentDirectionSurface(double value) {
      validate(fields()[9], value);
      this.seaCurrentDirectionSurface = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'seaCurrentDirectionSurface' field has been set.
      * @return True if the 'seaCurrentDirectionSurface' field has been set, false otherwise.
      */
    public boolean hasSeaCurrentDirectionSurface() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'seaCurrentDirectionSurface' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearSeaCurrentDirectionSurface() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'seaCurrentSpeedSurface' field.
      * @return The value.
      */
    public double getSeaCurrentSpeedSurface() {
      return seaCurrentSpeedSurface;
    }


    /**
      * Sets the value of the 'seaCurrentSpeedSurface' field.
      * @param value The value of 'seaCurrentSpeedSurface'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setSeaCurrentSpeedSurface(double value) {
      validate(fields()[10], value);
      this.seaCurrentSpeedSurface = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'seaCurrentSpeedSurface' field has been set.
      * @return True if the 'seaCurrentSpeedSurface' field has been set, false otherwise.
      */
    public boolean hasSeaCurrentSpeedSurface() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'seaCurrentSpeedSurface' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearSeaCurrentSpeedSurface() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'seaCurrentDirection5m' field.
      * @return The value.
      */
    public double getSeaCurrentDirection5m() {
      return seaCurrentDirection5m;
    }


    /**
      * Sets the value of the 'seaCurrentDirection5m' field.
      * @param value The value of 'seaCurrentDirection5m'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setSeaCurrentDirection5m(double value) {
      validate(fields()[11], value);
      this.seaCurrentDirection5m = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'seaCurrentDirection5m' field has been set.
      * @return True if the 'seaCurrentDirection5m' field has been set, false otherwise.
      */
    public boolean hasSeaCurrentDirection5m() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'seaCurrentDirection5m' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearSeaCurrentDirection5m() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'seaCurrentSpeed5m' field.
      * @return The value.
      */
    public double getSeaCurrentSpeed5m() {
      return seaCurrentSpeed5m;
    }


    /**
      * Sets the value of the 'seaCurrentSpeed5m' field.
      * @param value The value of 'seaCurrentSpeed5m'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setSeaCurrentSpeed5m(double value) {
      validate(fields()[12], value);
      this.seaCurrentSpeed5m = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'seaCurrentSpeed5m' field has been set.
      * @return True if the 'seaCurrentSpeed5m' field has been set, false otherwise.
      */
    public boolean hasSeaCurrentSpeed5m() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'seaCurrentSpeed5m' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearSeaCurrentSpeed5m() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'seaCurrentDirection10m' field.
      * @return The value.
      */
    public double getSeaCurrentDirection10m() {
      return seaCurrentDirection10m;
    }


    /**
      * Sets the value of the 'seaCurrentDirection10m' field.
      * @param value The value of 'seaCurrentDirection10m'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setSeaCurrentDirection10m(double value) {
      validate(fields()[13], value);
      this.seaCurrentDirection10m = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'seaCurrentDirection10m' field has been set.
      * @return True if the 'seaCurrentDirection10m' field has been set, false otherwise.
      */
    public boolean hasSeaCurrentDirection10m() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'seaCurrentDirection10m' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearSeaCurrentDirection10m() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'seaCurrentSpeed10m' field.
      * @return The value.
      */
    public double getSeaCurrentSpeed10m() {
      return seaCurrentSpeed10m;
    }


    /**
      * Sets the value of the 'seaCurrentSpeed10m' field.
      * @param value The value of 'seaCurrentSpeed10m'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setSeaCurrentSpeed10m(double value) {
      validate(fields()[14], value);
      this.seaCurrentSpeed10m = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'seaCurrentSpeed10m' field has been set.
      * @return True if the 'seaCurrentSpeed10m' field has been set, false otherwise.
      */
    public boolean hasSeaCurrentSpeed10m() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'seaCurrentSpeed10m' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearSeaCurrentSpeed10m() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'seaCurrentDirection15m' field.
      * @return The value.
      */
    public double getSeaCurrentDirection15m() {
      return seaCurrentDirection15m;
    }


    /**
      * Sets the value of the 'seaCurrentDirection15m' field.
      * @param value The value of 'seaCurrentDirection15m'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setSeaCurrentDirection15m(double value) {
      validate(fields()[15], value);
      this.seaCurrentDirection15m = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'seaCurrentDirection15m' field has been set.
      * @return True if the 'seaCurrentDirection15m' field has been set, false otherwise.
      */
    public boolean hasSeaCurrentDirection15m() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'seaCurrentDirection15m' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearSeaCurrentDirection15m() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'seaCurrentSpeed15m' field.
      * @return The value.
      */
    public double getSeaCurrentSpeed15m() {
      return seaCurrentSpeed15m;
    }


    /**
      * Sets the value of the 'seaCurrentSpeed15m' field.
      * @param value The value of 'seaCurrentSpeed15m'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setSeaCurrentSpeed15m(double value) {
      validate(fields()[16], value);
      this.seaCurrentSpeed15m = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'seaCurrentSpeed15m' field has been set.
      * @return True if the 'seaCurrentSpeed15m' field has been set, false otherwise.
      */
    public boolean hasSeaCurrentSpeed15m() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'seaCurrentSpeed15m' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearSeaCurrentSpeed15m() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'waterGap' field.
      * @return The value.
      */
    public double getWaterGap() {
      return waterGap;
    }


    /**
      * Sets the value of the 'waterGap' field.
      * @param value The value of 'waterGap'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setWaterGap(double value) {
      validate(fields()[17], value);
      this.waterGap = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'waterGap' field has been set.
      * @return True if the 'waterGap' field has been set, false otherwise.
      */
    public boolean hasWaterGap() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'waterGap' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearWaterGap() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'atmosphericPressure' field.
      * @return The value.
      */
    public double getAtmosphericPressure() {
      return atmosphericPressure;
    }


    /**
      * Sets the value of the 'atmosphericPressure' field.
      * @param value The value of 'atmosphericPressure'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setAtmosphericPressure(double value) {
      validate(fields()[18], value);
      this.atmosphericPressure = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'atmosphericPressure' field has been set.
      * @return True if the 'atmosphericPressure' field has been set, false otherwise.
      */
    public boolean hasAtmosphericPressure() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'atmosphericPressure' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearAtmosphericPressure() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'waterSalinity' field.
      * @return The value.
      */
    public double getWaterSalinity() {
      return waterSalinity;
    }


    /**
      * Sets the value of the 'waterSalinity' field.
      * @param value The value of 'waterSalinity'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setWaterSalinity(double value) {
      validate(fields()[19], value);
      this.waterSalinity = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'waterSalinity' field has been set.
      * @return True if the 'waterSalinity' field has been set, false otherwise.
      */
    public boolean hasWaterSalinity() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'waterSalinity' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearWaterSalinity() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'phLevel' field.
      * @return The value.
      */
    public float getPhLevel() {
      return phLevel;
    }


    /**
      * Sets the value of the 'phLevel' field.
      * @param value The value of 'phLevel'.
      * @return This builder.
      */
    public EnvironmentalData.Builder setPhLevel(float value) {
      validate(fields()[20], value);
      this.phLevel = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'phLevel' field has been set.
      * @return True if the 'phLevel' field has been set, false otherwise.
      */
    public boolean hasPhLevel() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'phLevel' field.
      * @return This builder.
      */
    public EnvironmentalData.Builder clearPhLevel() {
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EnvironmentalData build() {
      try {
        EnvironmentalData record = new EnvironmentalData();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.platformId = fieldSetFlags()[1] ? this.platformId : (java.lang.Long) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.waveHeight = fieldSetFlags()[3] ? this.waveHeight : (java.lang.Double) defaultValue(fields()[3]);
        record.wavePeriod = fieldSetFlags()[4] ? this.wavePeriod : (java.lang.Double) defaultValue(fields()[4]);
        record.waterTemperature = fieldSetFlags()[5] ? this.waterTemperature : (java.lang.Double) defaultValue(fields()[5]);
        record.airHumidity = fieldSetFlags()[6] ? this.airHumidity : (java.lang.Double) defaultValue(fields()[6]);
        record.windSpeed = fieldSetFlags()[7] ? this.windSpeed : (java.lang.Double) defaultValue(fields()[7]);
        record.windDirection = fieldSetFlags()[8] ? this.windDirection : (java.lang.Double) defaultValue(fields()[8]);
        record.seaCurrentDirectionSurface = fieldSetFlags()[9] ? this.seaCurrentDirectionSurface : (java.lang.Double) defaultValue(fields()[9]);
        record.seaCurrentSpeedSurface = fieldSetFlags()[10] ? this.seaCurrentSpeedSurface : (java.lang.Double) defaultValue(fields()[10]);
        record.seaCurrentDirection5m = fieldSetFlags()[11] ? this.seaCurrentDirection5m : (java.lang.Double) defaultValue(fields()[11]);
        record.seaCurrentSpeed5m = fieldSetFlags()[12] ? this.seaCurrentSpeed5m : (java.lang.Double) defaultValue(fields()[12]);
        record.seaCurrentDirection10m = fieldSetFlags()[13] ? this.seaCurrentDirection10m : (java.lang.Double) defaultValue(fields()[13]);
        record.seaCurrentSpeed10m = fieldSetFlags()[14] ? this.seaCurrentSpeed10m : (java.lang.Double) defaultValue(fields()[14]);
        record.seaCurrentDirection15m = fieldSetFlags()[15] ? this.seaCurrentDirection15m : (java.lang.Double) defaultValue(fields()[15]);
        record.seaCurrentSpeed15m = fieldSetFlags()[16] ? this.seaCurrentSpeed15m : (java.lang.Double) defaultValue(fields()[16]);
        record.waterGap = fieldSetFlags()[17] ? this.waterGap : (java.lang.Double) defaultValue(fields()[17]);
        record.atmosphericPressure = fieldSetFlags()[18] ? this.atmosphericPressure : (java.lang.Double) defaultValue(fields()[18]);
        record.waterSalinity = fieldSetFlags()[19] ? this.waterSalinity : (java.lang.Double) defaultValue(fields()[19]);
        record.phLevel = fieldSetFlags()[20] ? this.phLevel : (java.lang.Float) defaultValue(fields()[20]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EnvironmentalData>
    WRITER$ = (org.apache.avro.io.DatumWriter<EnvironmentalData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EnvironmentalData>
    READER$ = (org.apache.avro.io.DatumReader<EnvironmentalData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeLong(this.platformId);

    out.writeLong(this.timestamp);

    out.writeDouble(this.waveHeight);

    out.writeDouble(this.wavePeriod);

    out.writeDouble(this.waterTemperature);

    out.writeDouble(this.airHumidity);

    out.writeDouble(this.windSpeed);

    out.writeDouble(this.windDirection);

    out.writeDouble(this.seaCurrentDirectionSurface);

    out.writeDouble(this.seaCurrentSpeedSurface);

    out.writeDouble(this.seaCurrentDirection5m);

    out.writeDouble(this.seaCurrentSpeed5m);

    out.writeDouble(this.seaCurrentDirection10m);

    out.writeDouble(this.seaCurrentSpeed10m);

    out.writeDouble(this.seaCurrentDirection15m);

    out.writeDouble(this.seaCurrentSpeed15m);

    out.writeDouble(this.waterGap);

    out.writeDouble(this.atmosphericPressure);

    out.writeDouble(this.waterSalinity);

    out.writeFloat(this.phLevel);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.platformId = in.readLong();

      this.timestamp = in.readLong();

      this.waveHeight = in.readDouble();

      this.wavePeriod = in.readDouble();

      this.waterTemperature = in.readDouble();

      this.airHumidity = in.readDouble();

      this.windSpeed = in.readDouble();

      this.windDirection = in.readDouble();

      this.seaCurrentDirectionSurface = in.readDouble();

      this.seaCurrentSpeedSurface = in.readDouble();

      this.seaCurrentDirection5m = in.readDouble();

      this.seaCurrentSpeed5m = in.readDouble();

      this.seaCurrentDirection10m = in.readDouble();

      this.seaCurrentSpeed10m = in.readDouble();

      this.seaCurrentDirection15m = in.readDouble();

      this.seaCurrentSpeed15m = in.readDouble();

      this.waterGap = in.readDouble();

      this.atmosphericPressure = in.readDouble();

      this.waterSalinity = in.readDouble();

      this.phLevel = in.readFloat();

    } else {
      for (int i = 0; i < 21; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.platformId = in.readLong();
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.waveHeight = in.readDouble();
          break;

        case 4:
          this.wavePeriod = in.readDouble();
          break;

        case 5:
          this.waterTemperature = in.readDouble();
          break;

        case 6:
          this.airHumidity = in.readDouble();
          break;

        case 7:
          this.windSpeed = in.readDouble();
          break;

        case 8:
          this.windDirection = in.readDouble();
          break;

        case 9:
          this.seaCurrentDirectionSurface = in.readDouble();
          break;

        case 10:
          this.seaCurrentSpeedSurface = in.readDouble();
          break;

        case 11:
          this.seaCurrentDirection5m = in.readDouble();
          break;

        case 12:
          this.seaCurrentSpeed5m = in.readDouble();
          break;

        case 13:
          this.seaCurrentDirection10m = in.readDouble();
          break;

        case 14:
          this.seaCurrentSpeed10m = in.readDouble();
          break;

        case 15:
          this.seaCurrentDirection15m = in.readDouble();
          break;

        case 16:
          this.seaCurrentSpeed15m = in.readDouble();
          break;

        case 17:
          this.waterGap = in.readDouble();
          break;

        case 18:
          this.atmosphericPressure = in.readDouble();
          break;

        case 19:
          this.waterSalinity = in.readDouble();
          break;

        case 20:
          this.phLevel = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










