package app.domain.avro; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PlatformData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3724577773401686238L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"app.domain.avro.PlatformData\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"farmId\",\"type\":\"long\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"totalPowerOutput\",\"type\":\"double\"},{\"name\":\"totalEnergyProduced\",\"type\":\"double\"},{\"name\":\"averageWindSpeed\",\"type\":\"double\"},{\"name\":\"availability\",\"type\":\"double\"},{\"name\":\"gridFrequency\",\"type\":\"double\"},{\"name\":\"voltage\",\"type\":\"double\"},{\"name\":\"powerFactor\",\"type\":\"double\"},{\"name\":\"reactivePower\",\"type\":\"double\"},{\"name\":\"curtailment\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PlatformData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlatformData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlatformData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlatformData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlatformData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this app.domain.avro.PlatformData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a app.domain.avro.PlatformData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a app.domain.avro.PlatformData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlatformData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private long farmId;
  private java.lang.CharSequence status;
  private double totalPowerOutput;
  private double totalEnergyProduced;
  private double averageWindSpeed;
  private double availability;
  private double gridFrequency;
  private double voltage;
  private double powerFactor;
  private double reactivePower;
  private double curtailment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlatformData() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param farmId The new value for farmId
   * @param status The new value for status
   * @param totalPowerOutput The new value for totalPowerOutput
   * @param totalEnergyProduced The new value for totalEnergyProduced
   * @param averageWindSpeed The new value for averageWindSpeed
   * @param availability The new value for availability
   * @param gridFrequency The new value for gridFrequency
   * @param voltage The new value for voltage
   * @param powerFactor The new value for powerFactor
   * @param reactivePower The new value for reactivePower
   * @param curtailment The new value for curtailment
   */
  public PlatformData(java.lang.Long id, java.lang.Long farmId, java.lang.CharSequence status, java.lang.Double totalPowerOutput, java.lang.Double totalEnergyProduced, java.lang.Double averageWindSpeed, java.lang.Double availability, java.lang.Double gridFrequency, java.lang.Double voltage, java.lang.Double powerFactor, java.lang.Double reactivePower, java.lang.Double curtailment) {
    this.id = id;
    this.farmId = farmId;
    this.status = status;
    this.totalPowerOutput = totalPowerOutput;
    this.totalEnergyProduced = totalEnergyProduced;
    this.averageWindSpeed = averageWindSpeed;
    this.availability = availability;
    this.gridFrequency = gridFrequency;
    this.voltage = voltage;
    this.powerFactor = powerFactor;
    this.reactivePower = reactivePower;
    this.curtailment = curtailment;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return farmId;
    case 2: return status;
    case 3: return totalPowerOutput;
    case 4: return totalEnergyProduced;
    case 5: return averageWindSpeed;
    case 6: return availability;
    case 7: return gridFrequency;
    case 8: return voltage;
    case 9: return powerFactor;
    case 10: return reactivePower;
    case 11: return curtailment;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: farmId = (java.lang.Long)value$; break;
    case 2: status = (java.lang.CharSequence)value$; break;
    case 3: totalPowerOutput = (java.lang.Double)value$; break;
    case 4: totalEnergyProduced = (java.lang.Double)value$; break;
    case 5: averageWindSpeed = (java.lang.Double)value$; break;
    case 6: availability = (java.lang.Double)value$; break;
    case 7: gridFrequency = (java.lang.Double)value$; break;
    case 8: voltage = (java.lang.Double)value$; break;
    case 9: powerFactor = (java.lang.Double)value$; break;
    case 10: reactivePower = (java.lang.Double)value$; break;
    case 11: curtailment = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'farmId' field.
   * @return The value of the 'farmId' field.
   */
  public long getFarmId() {
    return farmId;
  }


  /**
   * Sets the value of the 'farmId' field.
   * @param value the value to set.
   */
  public void setFarmId(long value) {
    this.farmId = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'totalPowerOutput' field.
   * @return The value of the 'totalPowerOutput' field.
   */
  public double getTotalPowerOutput() {
    return totalPowerOutput;
  }


  /**
   * Sets the value of the 'totalPowerOutput' field.
   * @param value the value to set.
   */
  public void setTotalPowerOutput(double value) {
    this.totalPowerOutput = value;
  }

  /**
   * Gets the value of the 'totalEnergyProduced' field.
   * @return The value of the 'totalEnergyProduced' field.
   */
  public double getTotalEnergyProduced() {
    return totalEnergyProduced;
  }


  /**
   * Sets the value of the 'totalEnergyProduced' field.
   * @param value the value to set.
   */
  public void setTotalEnergyProduced(double value) {
    this.totalEnergyProduced = value;
  }

  /**
   * Gets the value of the 'averageWindSpeed' field.
   * @return The value of the 'averageWindSpeed' field.
   */
  public double getAverageWindSpeed() {
    return averageWindSpeed;
  }


  /**
   * Sets the value of the 'averageWindSpeed' field.
   * @param value the value to set.
   */
  public void setAverageWindSpeed(double value) {
    this.averageWindSpeed = value;
  }

  /**
   * Gets the value of the 'availability' field.
   * @return The value of the 'availability' field.
   */
  public double getAvailability() {
    return availability;
  }


  /**
   * Sets the value of the 'availability' field.
   * @param value the value to set.
   */
  public void setAvailability(double value) {
    this.availability = value;
  }

  /**
   * Gets the value of the 'gridFrequency' field.
   * @return The value of the 'gridFrequency' field.
   */
  public double getGridFrequency() {
    return gridFrequency;
  }


  /**
   * Sets the value of the 'gridFrequency' field.
   * @param value the value to set.
   */
  public void setGridFrequency(double value) {
    this.gridFrequency = value;
  }

  /**
   * Gets the value of the 'voltage' field.
   * @return The value of the 'voltage' field.
   */
  public double getVoltage() {
    return voltage;
  }


  /**
   * Sets the value of the 'voltage' field.
   * @param value the value to set.
   */
  public void setVoltage(double value) {
    this.voltage = value;
  }

  /**
   * Gets the value of the 'powerFactor' field.
   * @return The value of the 'powerFactor' field.
   */
  public double getPowerFactor() {
    return powerFactor;
  }


  /**
   * Sets the value of the 'powerFactor' field.
   * @param value the value to set.
   */
  public void setPowerFactor(double value) {
    this.powerFactor = value;
  }

  /**
   * Gets the value of the 'reactivePower' field.
   * @return The value of the 'reactivePower' field.
   */
  public double getReactivePower() {
    return reactivePower;
  }


  /**
   * Sets the value of the 'reactivePower' field.
   * @param value the value to set.
   */
  public void setReactivePower(double value) {
    this.reactivePower = value;
  }

  /**
   * Gets the value of the 'curtailment' field.
   * @return The value of the 'curtailment' field.
   */
  public double getCurtailment() {
    return curtailment;
  }


  /**
   * Sets the value of the 'curtailment' field.
   * @param value the value to set.
   */
  public void setCurtailment(double value) {
    this.curtailment = value;
  }

  /**
   * Creates a new app.domain.avro.PlatformData RecordBuilder.
   * @return A new app.domain.avro.PlatformData RecordBuilder
   */
  public static PlatformData.Builder newBuilder() {
    return new PlatformData.Builder();
  }

  /**
   * Creates a new app.domain.avro.PlatformData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new app.domain.avro.PlatformData RecordBuilder
   */
  public static PlatformData.Builder newBuilder(PlatformData.Builder other) {
    if (other == null) {
      return new PlatformData.Builder();
    } else {
      return new PlatformData.Builder(other);
    }
  }

  /**
   * Creates a new app.domain.avro.PlatformData RecordBuilder by copying an existing app.domain.avro.PlatformData instance.
   * @param other The existing instance to copy.
   * @return A new app.domain.avro.PlatformData RecordBuilder
   */
  public static PlatformData.Builder newBuilder(PlatformData other) {
    if (other == null) {
      return new PlatformData.Builder();
    } else {
      return new PlatformData.Builder(other);
    }
  }

  /**
   * RecordBuilder for app.domain.avro.PlatformData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlatformData>
    implements org.apache.avro.data.RecordBuilder<PlatformData> {

    private long id;
    private long farmId;
    private java.lang.CharSequence status;
    private double totalPowerOutput;
    private double totalEnergyProduced;
    private double averageWindSpeed;
    private double availability;
    private double gridFrequency;
    private double voltage;
    private double powerFactor;
    private double reactivePower;
    private double curtailment;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(PlatformData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.farmId)) {
        this.farmId = data().deepCopy(fields()[1].schema(), other.farmId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.totalPowerOutput)) {
        this.totalPowerOutput = data().deepCopy(fields()[3].schema(), other.totalPowerOutput);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.totalEnergyProduced)) {
        this.totalEnergyProduced = data().deepCopy(fields()[4].schema(), other.totalEnergyProduced);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.averageWindSpeed)) {
        this.averageWindSpeed = data().deepCopy(fields()[5].schema(), other.averageWindSpeed);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.availability)) {
        this.availability = data().deepCopy(fields()[6].schema(), other.availability);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.gridFrequency)) {
        this.gridFrequency = data().deepCopy(fields()[7].schema(), other.gridFrequency);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.voltage)) {
        this.voltage = data().deepCopy(fields()[8].schema(), other.voltage);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.powerFactor)) {
        this.powerFactor = data().deepCopy(fields()[9].schema(), other.powerFactor);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.reactivePower)) {
        this.reactivePower = data().deepCopy(fields()[10].schema(), other.reactivePower);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.curtailment)) {
        this.curtailment = data().deepCopy(fields()[11].schema(), other.curtailment);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing app.domain.avro.PlatformData instance
     * @param other The existing instance to copy.
     */
    private Builder(PlatformData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.farmId)) {
        this.farmId = data().deepCopy(fields()[1].schema(), other.farmId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.totalPowerOutput)) {
        this.totalPowerOutput = data().deepCopy(fields()[3].schema(), other.totalPowerOutput);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalEnergyProduced)) {
        this.totalEnergyProduced = data().deepCopy(fields()[4].schema(), other.totalEnergyProduced);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.averageWindSpeed)) {
        this.averageWindSpeed = data().deepCopy(fields()[5].schema(), other.averageWindSpeed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.availability)) {
        this.availability = data().deepCopy(fields()[6].schema(), other.availability);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.gridFrequency)) {
        this.gridFrequency = data().deepCopy(fields()[7].schema(), other.gridFrequency);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.voltage)) {
        this.voltage = data().deepCopy(fields()[8].schema(), other.voltage);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.powerFactor)) {
        this.powerFactor = data().deepCopy(fields()[9].schema(), other.powerFactor);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.reactivePower)) {
        this.reactivePower = data().deepCopy(fields()[10].schema(), other.reactivePower);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.curtailment)) {
        this.curtailment = data().deepCopy(fields()[11].schema(), other.curtailment);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public PlatformData.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public PlatformData.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'farmId' field.
      * @return The value.
      */
    public long getFarmId() {
      return farmId;
    }


    /**
      * Sets the value of the 'farmId' field.
      * @param value The value of 'farmId'.
      * @return This builder.
      */
    public PlatformData.Builder setFarmId(long value) {
      validate(fields()[1], value);
      this.farmId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'farmId' field has been set.
      * @return True if the 'farmId' field has been set, false otherwise.
      */
    public boolean hasFarmId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'farmId' field.
      * @return This builder.
      */
    public PlatformData.Builder clearFarmId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public PlatformData.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public PlatformData.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPowerOutput' field.
      * @return The value.
      */
    public double getTotalPowerOutput() {
      return totalPowerOutput;
    }


    /**
      * Sets the value of the 'totalPowerOutput' field.
      * @param value The value of 'totalPowerOutput'.
      * @return This builder.
      */
    public PlatformData.Builder setTotalPowerOutput(double value) {
      validate(fields()[3], value);
      this.totalPowerOutput = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPowerOutput' field has been set.
      * @return True if the 'totalPowerOutput' field has been set, false otherwise.
      */
    public boolean hasTotalPowerOutput() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'totalPowerOutput' field.
      * @return This builder.
      */
    public PlatformData.Builder clearTotalPowerOutput() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalEnergyProduced' field.
      * @return The value.
      */
    public double getTotalEnergyProduced() {
      return totalEnergyProduced;
    }


    /**
      * Sets the value of the 'totalEnergyProduced' field.
      * @param value The value of 'totalEnergyProduced'.
      * @return This builder.
      */
    public PlatformData.Builder setTotalEnergyProduced(double value) {
      validate(fields()[4], value);
      this.totalEnergyProduced = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalEnergyProduced' field has been set.
      * @return True if the 'totalEnergyProduced' field has been set, false otherwise.
      */
    public boolean hasTotalEnergyProduced() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalEnergyProduced' field.
      * @return This builder.
      */
    public PlatformData.Builder clearTotalEnergyProduced() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageWindSpeed' field.
      * @return The value.
      */
    public double getAverageWindSpeed() {
      return averageWindSpeed;
    }


    /**
      * Sets the value of the 'averageWindSpeed' field.
      * @param value The value of 'averageWindSpeed'.
      * @return This builder.
      */
    public PlatformData.Builder setAverageWindSpeed(double value) {
      validate(fields()[5], value);
      this.averageWindSpeed = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'averageWindSpeed' field has been set.
      * @return True if the 'averageWindSpeed' field has been set, false otherwise.
      */
    public boolean hasAverageWindSpeed() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'averageWindSpeed' field.
      * @return This builder.
      */
    public PlatformData.Builder clearAverageWindSpeed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'availability' field.
      * @return The value.
      */
    public double getAvailability() {
      return availability;
    }


    /**
      * Sets the value of the 'availability' field.
      * @param value The value of 'availability'.
      * @return This builder.
      */
    public PlatformData.Builder setAvailability(double value) {
      validate(fields()[6], value);
      this.availability = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'availability' field has been set.
      * @return True if the 'availability' field has been set, false otherwise.
      */
    public boolean hasAvailability() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'availability' field.
      * @return This builder.
      */
    public PlatformData.Builder clearAvailability() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'gridFrequency' field.
      * @return The value.
      */
    public double getGridFrequency() {
      return gridFrequency;
    }


    /**
      * Sets the value of the 'gridFrequency' field.
      * @param value The value of 'gridFrequency'.
      * @return This builder.
      */
    public PlatformData.Builder setGridFrequency(double value) {
      validate(fields()[7], value);
      this.gridFrequency = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'gridFrequency' field has been set.
      * @return True if the 'gridFrequency' field has been set, false otherwise.
      */
    public boolean hasGridFrequency() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'gridFrequency' field.
      * @return This builder.
      */
    public PlatformData.Builder clearGridFrequency() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'voltage' field.
      * @return The value.
      */
    public double getVoltage() {
      return voltage;
    }


    /**
      * Sets the value of the 'voltage' field.
      * @param value The value of 'voltage'.
      * @return This builder.
      */
    public PlatformData.Builder setVoltage(double value) {
      validate(fields()[8], value);
      this.voltage = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'voltage' field has been set.
      * @return True if the 'voltage' field has been set, false otherwise.
      */
    public boolean hasVoltage() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'voltage' field.
      * @return This builder.
      */
    public PlatformData.Builder clearVoltage() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'powerFactor' field.
      * @return The value.
      */
    public double getPowerFactor() {
      return powerFactor;
    }


    /**
      * Sets the value of the 'powerFactor' field.
      * @param value The value of 'powerFactor'.
      * @return This builder.
      */
    public PlatformData.Builder setPowerFactor(double value) {
      validate(fields()[9], value);
      this.powerFactor = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'powerFactor' field has been set.
      * @return True if the 'powerFactor' field has been set, false otherwise.
      */
    public boolean hasPowerFactor() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'powerFactor' field.
      * @return This builder.
      */
    public PlatformData.Builder clearPowerFactor() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactivePower' field.
      * @return The value.
      */
    public double getReactivePower() {
      return reactivePower;
    }


    /**
      * Sets the value of the 'reactivePower' field.
      * @param value The value of 'reactivePower'.
      * @return This builder.
      */
    public PlatformData.Builder setReactivePower(double value) {
      validate(fields()[10], value);
      this.reactivePower = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'reactivePower' field has been set.
      * @return True if the 'reactivePower' field has been set, false otherwise.
      */
    public boolean hasReactivePower() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'reactivePower' field.
      * @return This builder.
      */
    public PlatformData.Builder clearReactivePower() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'curtailment' field.
      * @return The value.
      */
    public double getCurtailment() {
      return curtailment;
    }


    /**
      * Sets the value of the 'curtailment' field.
      * @param value The value of 'curtailment'.
      * @return This builder.
      */
    public PlatformData.Builder setCurtailment(double value) {
      validate(fields()[11], value);
      this.curtailment = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'curtailment' field has been set.
      * @return True if the 'curtailment' field has been set, false otherwise.
      */
    public boolean hasCurtailment() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'curtailment' field.
      * @return This builder.
      */
    public PlatformData.Builder clearCurtailment() {
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlatformData build() {
      try {
        PlatformData record = new PlatformData();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.farmId = fieldSetFlags()[1] ? this.farmId : (java.lang.Long) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.totalPowerOutput = fieldSetFlags()[3] ? this.totalPowerOutput : (java.lang.Double) defaultValue(fields()[3]);
        record.totalEnergyProduced = fieldSetFlags()[4] ? this.totalEnergyProduced : (java.lang.Double) defaultValue(fields()[4]);
        record.averageWindSpeed = fieldSetFlags()[5] ? this.averageWindSpeed : (java.lang.Double) defaultValue(fields()[5]);
        record.availability = fieldSetFlags()[6] ? this.availability : (java.lang.Double) defaultValue(fields()[6]);
        record.gridFrequency = fieldSetFlags()[7] ? this.gridFrequency : (java.lang.Double) defaultValue(fields()[7]);
        record.voltage = fieldSetFlags()[8] ? this.voltage : (java.lang.Double) defaultValue(fields()[8]);
        record.powerFactor = fieldSetFlags()[9] ? this.powerFactor : (java.lang.Double) defaultValue(fields()[9]);
        record.reactivePower = fieldSetFlags()[10] ? this.reactivePower : (java.lang.Double) defaultValue(fields()[10]);
        record.curtailment = fieldSetFlags()[11] ? this.curtailment : (java.lang.Double) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlatformData>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlatformData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlatformData>
    READER$ = (org.apache.avro.io.DatumReader<PlatformData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeLong(this.farmId);

    out.writeString(this.status);

    out.writeDouble(this.totalPowerOutput);

    out.writeDouble(this.totalEnergyProduced);

    out.writeDouble(this.averageWindSpeed);

    out.writeDouble(this.availability);

    out.writeDouble(this.gridFrequency);

    out.writeDouble(this.voltage);

    out.writeDouble(this.powerFactor);

    out.writeDouble(this.reactivePower);

    out.writeDouble(this.curtailment);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.farmId = in.readLong();

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      this.totalPowerOutput = in.readDouble();

      this.totalEnergyProduced = in.readDouble();

      this.averageWindSpeed = in.readDouble();

      this.availability = in.readDouble();

      this.gridFrequency = in.readDouble();

      this.voltage = in.readDouble();

      this.powerFactor = in.readDouble();

      this.reactivePower = in.readDouble();

      this.curtailment = in.readDouble();

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.farmId = in.readLong();
          break;

        case 2:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        case 3:
          this.totalPowerOutput = in.readDouble();
          break;

        case 4:
          this.totalEnergyProduced = in.readDouble();
          break;

        case 5:
          this.averageWindSpeed = in.readDouble();
          break;

        case 6:
          this.availability = in.readDouble();
          break;

        case 7:
          this.gridFrequency = in.readDouble();
          break;

        case 8:
          this.voltage = in.readDouble();
          break;

        case 9:
          this.powerFactor = in.readDouble();
          break;

        case 10:
          this.reactivePower = in.readDouble();
          break;

        case 11:
          this.curtailment = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










