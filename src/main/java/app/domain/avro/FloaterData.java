package app.domain.avro; /**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FloaterData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8929581014515980673L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"app.domain.avro.FloaterData\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"platformId\",\"type\":\"long\"},{\"name\":\"pitch\",\"type\":\"double\"},{\"name\":\"roll\",\"type\":\"double\"},{\"name\":\"yaw\",\"type\":\"double\"},{\"name\":\"surge\",\"type\":\"double\"},{\"name\":\"sway\",\"type\":\"double\"},{\"name\":\"heave\",\"type\":\"double\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FloaterData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FloaterData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FloaterData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FloaterData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FloaterData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this app.domain.avro.FloaterData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a app.domain.avro.FloaterData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a app.domain.avro.FloaterData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FloaterData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private long platformId;
  private double pitch;
  private double roll;
  private double yaw;
  private double surge;
  private double sway;
  private double heave;
  private double latitude;
  private double longitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FloaterData() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param platformId The new value for platformId
   * @param pitch The new value for pitch
   * @param roll The new value for roll
   * @param yaw The new value for yaw
   * @param surge The new value for surge
   * @param sway The new value for sway
   * @param heave The new value for heave
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   */
  public FloaterData(java.lang.Long id, java.lang.Long platformId, java.lang.Double pitch, java.lang.Double roll, java.lang.Double yaw, java.lang.Double surge, java.lang.Double sway, java.lang.Double heave, java.lang.Double latitude, java.lang.Double longitude) {
    this.id = id;
    this.platformId = platformId;
    this.pitch = pitch;
    this.roll = roll;
    this.yaw = yaw;
    this.surge = surge;
    this.sway = sway;
    this.heave = heave;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return platformId;
    case 2: return pitch;
    case 3: return roll;
    case 4: return yaw;
    case 5: return surge;
    case 6: return sway;
    case 7: return heave;
    case 8: return latitude;
    case 9: return longitude;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: platformId = (java.lang.Long)value$; break;
    case 2: pitch = (java.lang.Double)value$; break;
    case 3: roll = (java.lang.Double)value$; break;
    case 4: yaw = (java.lang.Double)value$; break;
    case 5: surge = (java.lang.Double)value$; break;
    case 6: sway = (java.lang.Double)value$; break;
    case 7: heave = (java.lang.Double)value$; break;
    case 8: latitude = (java.lang.Double)value$; break;
    case 9: longitude = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'platformId' field.
   * @return The value of the 'platformId' field.
   */
  public long getPlatformId() {
    return platformId;
  }


  /**
   * Sets the value of the 'platformId' field.
   * @param value the value to set.
   */
  public void setPlatformId(long value) {
    this.platformId = value;
  }

  /**
   * Gets the value of the 'pitch' field.
   * @return The value of the 'pitch' field.
   */
  public double getPitch() {
    return pitch;
  }


  /**
   * Sets the value of the 'pitch' field.
   * @param value the value to set.
   */
  public void setPitch(double value) {
    this.pitch = value;
  }

  /**
   * Gets the value of the 'roll' field.
   * @return The value of the 'roll' field.
   */
  public double getRoll() {
    return roll;
  }


  /**
   * Sets the value of the 'roll' field.
   * @param value the value to set.
   */
  public void setRoll(double value) {
    this.roll = value;
  }

  /**
   * Gets the value of the 'yaw' field.
   * @return The value of the 'yaw' field.
   */
  public double getYaw() {
    return yaw;
  }


  /**
   * Sets the value of the 'yaw' field.
   * @param value the value to set.
   */
  public void setYaw(double value) {
    this.yaw = value;
  }

  /**
   * Gets the value of the 'surge' field.
   * @return The value of the 'surge' field.
   */
  public double getSurge() {
    return surge;
  }


  /**
   * Sets the value of the 'surge' field.
   * @param value the value to set.
   */
  public void setSurge(double value) {
    this.surge = value;
  }

  /**
   * Gets the value of the 'sway' field.
   * @return The value of the 'sway' field.
   */
  public double getSway() {
    return sway;
  }


  /**
   * Sets the value of the 'sway' field.
   * @param value the value to set.
   */
  public void setSway(double value) {
    this.sway = value;
  }

  /**
   * Gets the value of the 'heave' field.
   * @return The value of the 'heave' field.
   */
  public double getHeave() {
    return heave;
  }


  /**
   * Sets the value of the 'heave' field.
   * @param value the value to set.
   */
  public void setHeave(double value) {
    this.heave = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public double getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public double getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(double value) {
    this.longitude = value;
  }

  /**
   * Creates a new app.domain.avro.FloaterData RecordBuilder.
   * @return A new app.domain.avro.FloaterData RecordBuilder
   */
  public static FloaterData.Builder newBuilder() {
    return new FloaterData.Builder();
  }

  /**
   * Creates a new app.domain.avro.FloaterData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new app.domain.avro.FloaterData RecordBuilder
   */
  public static FloaterData.Builder newBuilder(FloaterData.Builder other) {
    if (other == null) {
      return new FloaterData.Builder();
    } else {
      return new FloaterData.Builder(other);
    }
  }

  /**
   * Creates a new app.domain.avro.FloaterData RecordBuilder by copying an existing app.domain.avro.FloaterData instance.
   * @param other The existing instance to copy.
   * @return A new app.domain.avro.FloaterData RecordBuilder
   */
  public static FloaterData.Builder newBuilder(FloaterData other) {
    if (other == null) {
      return new FloaterData.Builder();
    } else {
      return new FloaterData.Builder(other);
    }
  }

  /**
   * RecordBuilder for app.domain.avro.FloaterData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FloaterData>
    implements org.apache.avro.data.RecordBuilder<FloaterData> {

    private long id;
    private long platformId;
    private double pitch;
    private double roll;
    private double yaw;
    private double surge;
    private double sway;
    private double heave;
    private double latitude;
    private double longitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(FloaterData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.platformId)) {
        this.platformId = data().deepCopy(fields()[1].schema(), other.platformId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.pitch)) {
        this.pitch = data().deepCopy(fields()[2].schema(), other.pitch);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.roll)) {
        this.roll = data().deepCopy(fields()[3].schema(), other.roll);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.yaw)) {
        this.yaw = data().deepCopy(fields()[4].schema(), other.yaw);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.surge)) {
        this.surge = data().deepCopy(fields()[5].schema(), other.surge);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.sway)) {
        this.sway = data().deepCopy(fields()[6].schema(), other.sway);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.heave)) {
        this.heave = data().deepCopy(fields()[7].schema(), other.heave);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.latitude)) {
        this.latitude = data().deepCopy(fields()[8].schema(), other.latitude);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.longitude)) {
        this.longitude = data().deepCopy(fields()[9].schema(), other.longitude);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing app.domain.avro.FloaterData instance
     * @param other The existing instance to copy.
     */
    private Builder(FloaterData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.platformId)) {
        this.platformId = data().deepCopy(fields()[1].schema(), other.platformId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pitch)) {
        this.pitch = data().deepCopy(fields()[2].schema(), other.pitch);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.roll)) {
        this.roll = data().deepCopy(fields()[3].schema(), other.roll);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.yaw)) {
        this.yaw = data().deepCopy(fields()[4].schema(), other.yaw);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.surge)) {
        this.surge = data().deepCopy(fields()[5].schema(), other.surge);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sway)) {
        this.sway = data().deepCopy(fields()[6].schema(), other.sway);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.heave)) {
        this.heave = data().deepCopy(fields()[7].schema(), other.heave);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.latitude)) {
        this.latitude = data().deepCopy(fields()[8].schema(), other.latitude);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.longitude)) {
        this.longitude = data().deepCopy(fields()[9].schema(), other.longitude);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public FloaterData.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public FloaterData.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'platformId' field.
      * @return The value.
      */
    public long getPlatformId() {
      return platformId;
    }


    /**
      * Sets the value of the 'platformId' field.
      * @param value The value of 'platformId'.
      * @return This builder.
      */
    public FloaterData.Builder setPlatformId(long value) {
      validate(fields()[1], value);
      this.platformId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'platformId' field has been set.
      * @return True if the 'platformId' field has been set, false otherwise.
      */
    public boolean hasPlatformId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'platformId' field.
      * @return This builder.
      */
    public FloaterData.Builder clearPlatformId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pitch' field.
      * @return The value.
      */
    public double getPitch() {
      return pitch;
    }


    /**
      * Sets the value of the 'pitch' field.
      * @param value The value of 'pitch'.
      * @return This builder.
      */
    public FloaterData.Builder setPitch(double value) {
      validate(fields()[2], value);
      this.pitch = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pitch' field has been set.
      * @return True if the 'pitch' field has been set, false otherwise.
      */
    public boolean hasPitch() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pitch' field.
      * @return This builder.
      */
    public FloaterData.Builder clearPitch() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'roll' field.
      * @return The value.
      */
    public double getRoll() {
      return roll;
    }


    /**
      * Sets the value of the 'roll' field.
      * @param value The value of 'roll'.
      * @return This builder.
      */
    public FloaterData.Builder setRoll(double value) {
      validate(fields()[3], value);
      this.roll = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'roll' field has been set.
      * @return True if the 'roll' field has been set, false otherwise.
      */
    public boolean hasRoll() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'roll' field.
      * @return This builder.
      */
    public FloaterData.Builder clearRoll() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'yaw' field.
      * @return The value.
      */
    public double getYaw() {
      return yaw;
    }


    /**
      * Sets the value of the 'yaw' field.
      * @param value The value of 'yaw'.
      * @return This builder.
      */
    public FloaterData.Builder setYaw(double value) {
      validate(fields()[4], value);
      this.yaw = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'yaw' field has been set.
      * @return True if the 'yaw' field has been set, false otherwise.
      */
    public boolean hasYaw() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'yaw' field.
      * @return This builder.
      */
    public FloaterData.Builder clearYaw() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'surge' field.
      * @return The value.
      */
    public double getSurge() {
      return surge;
    }


    /**
      * Sets the value of the 'surge' field.
      * @param value The value of 'surge'.
      * @return This builder.
      */
    public FloaterData.Builder setSurge(double value) {
      validate(fields()[5], value);
      this.surge = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'surge' field has been set.
      * @return True if the 'surge' field has been set, false otherwise.
      */
    public boolean hasSurge() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'surge' field.
      * @return This builder.
      */
    public FloaterData.Builder clearSurge() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sway' field.
      * @return The value.
      */
    public double getSway() {
      return sway;
    }


    /**
      * Sets the value of the 'sway' field.
      * @param value The value of 'sway'.
      * @return This builder.
      */
    public FloaterData.Builder setSway(double value) {
      validate(fields()[6], value);
      this.sway = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sway' field has been set.
      * @return True if the 'sway' field has been set, false otherwise.
      */
    public boolean hasSway() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sway' field.
      * @return This builder.
      */
    public FloaterData.Builder clearSway() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'heave' field.
      * @return The value.
      */
    public double getHeave() {
      return heave;
    }


    /**
      * Sets the value of the 'heave' field.
      * @param value The value of 'heave'.
      * @return This builder.
      */
    public FloaterData.Builder setHeave(double value) {
      validate(fields()[7], value);
      this.heave = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'heave' field has been set.
      * @return True if the 'heave' field has been set, false otherwise.
      */
    public boolean hasHeave() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'heave' field.
      * @return This builder.
      */
    public FloaterData.Builder clearHeave() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public FloaterData.Builder setLatitude(double value) {
      validate(fields()[8], value);
      this.latitude = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public FloaterData.Builder clearLatitude() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public FloaterData.Builder setLongitude(double value) {
      validate(fields()[9], value);
      this.longitude = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public FloaterData.Builder clearLongitude() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FloaterData build() {
      try {
        FloaterData record = new FloaterData();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.platformId = fieldSetFlags()[1] ? this.platformId : (java.lang.Long) defaultValue(fields()[1]);
        record.pitch = fieldSetFlags()[2] ? this.pitch : (java.lang.Double) defaultValue(fields()[2]);
        record.roll = fieldSetFlags()[3] ? this.roll : (java.lang.Double) defaultValue(fields()[3]);
        record.yaw = fieldSetFlags()[4] ? this.yaw : (java.lang.Double) defaultValue(fields()[4]);
        record.surge = fieldSetFlags()[5] ? this.surge : (java.lang.Double) defaultValue(fields()[5]);
        record.sway = fieldSetFlags()[6] ? this.sway : (java.lang.Double) defaultValue(fields()[6]);
        record.heave = fieldSetFlags()[7] ? this.heave : (java.lang.Double) defaultValue(fields()[7]);
        record.latitude = fieldSetFlags()[8] ? this.latitude : (java.lang.Double) defaultValue(fields()[8]);
        record.longitude = fieldSetFlags()[9] ? this.longitude : (java.lang.Double) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FloaterData>
    WRITER$ = (org.apache.avro.io.DatumWriter<FloaterData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FloaterData>
    READER$ = (org.apache.avro.io.DatumReader<FloaterData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeLong(this.platformId);

    out.writeDouble(this.pitch);

    out.writeDouble(this.roll);

    out.writeDouble(this.yaw);

    out.writeDouble(this.surge);

    out.writeDouble(this.sway);

    out.writeDouble(this.heave);

    out.writeDouble(this.latitude);

    out.writeDouble(this.longitude);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.platformId = in.readLong();

      this.pitch = in.readDouble();

      this.roll = in.readDouble();

      this.yaw = in.readDouble();

      this.surge = in.readDouble();

      this.sway = in.readDouble();

      this.heave = in.readDouble();

      this.latitude = in.readDouble();

      this.longitude = in.readDouble();

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.platformId = in.readLong();
          break;

        case 2:
          this.pitch = in.readDouble();
          break;

        case 3:
          this.roll = in.readDouble();
          break;

        case 4:
          this.yaw = in.readDouble();
          break;

        case 5:
          this.surge = in.readDouble();
          break;

        case 6:
          this.sway = in.readDouble();
          break;

        case 7:
          this.heave = in.readDouble();
          break;

        case 8:
          this.latitude = in.readDouble();
          break;

        case 9:
          this.longitude = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










