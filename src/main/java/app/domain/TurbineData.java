/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TurbineData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7915298350029162614L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TurbineData\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"turbineId\",\"type\":\"long\"},{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"windDirection\",\"type\":\"double\"},{\"name\":\"windSpeed\",\"type\":\"double\"},{\"name\":\"rotorSpeed\",\"type\":\"double\"},{\"name\":\"yawAngle\",\"type\":\"double\"},{\"name\":\"pitchAngle\",\"type\":\"double\"},{\"name\":\"powerOutput\",\"type\":\"double\"},{\"name\":\"reactivePower\",\"type\":\"double\"},{\"name\":\"gridFrequency\",\"type\":\"float\"},{\"name\":\"voltage\",\"type\":\"double\"},{\"name\":\"current\",\"type\":\"double\"},{\"name\":\"vibrationLevels\",\"type\":\"double\"},{\"name\":\"hydraulicPressure\",\"type\":\"double\"},{\"name\":\"lubricantLevel\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TurbineData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TurbineData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TurbineData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TurbineData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TurbineData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TurbineData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TurbineData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TurbineData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TurbineData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private long turbineId;
  private long timestamp;
  private double windDirection;
  private double windSpeed;
  private double rotorSpeed;
  private double yawAngle;
  private double pitchAngle;
  private double powerOutput;
  private double reactivePower;
  private float gridFrequency;
  private double voltage;
  private double current;
  private double vibrationLevels;
  private double hydraulicPressure;
  private double lubricantLevel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TurbineData() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param turbineId The new value for turbineId
   * @param timestamp The new value for timestamp
   * @param windDirection The new value for windDirection
   * @param windSpeed The new value for windSpeed
   * @param rotorSpeed The new value for rotorSpeed
   * @param yawAngle The new value for yawAngle
   * @param pitchAngle The new value for pitchAngle
   * @param powerOutput The new value for powerOutput
   * @param reactivePower The new value for reactivePower
   * @param gridFrequency The new value for gridFrequency
   * @param voltage The new value for voltage
   * @param current The new value for current
   * @param vibrationLevels The new value for vibrationLevels
   * @param hydraulicPressure The new value for hydraulicPressure
   * @param lubricantLevel The new value for lubricantLevel
   */
  public TurbineData(java.lang.Long id, java.lang.Long turbineId, java.lang.Long timestamp, java.lang.Double windDirection, java.lang.Double windSpeed, java.lang.Double rotorSpeed, java.lang.Double yawAngle, java.lang.Double pitchAngle, java.lang.Double powerOutput, java.lang.Double reactivePower, java.lang.Float gridFrequency, java.lang.Double voltage, java.lang.Double current, java.lang.Double vibrationLevels, java.lang.Double hydraulicPressure, java.lang.Double lubricantLevel) {
    this.id = id;
    this.turbineId = turbineId;
    this.timestamp = timestamp;
    this.windDirection = windDirection;
    this.windSpeed = windSpeed;
    this.rotorSpeed = rotorSpeed;
    this.yawAngle = yawAngle;
    this.pitchAngle = pitchAngle;
    this.powerOutput = powerOutput;
    this.reactivePower = reactivePower;
    this.gridFrequency = gridFrequency;
    this.voltage = voltage;
    this.current = current;
    this.vibrationLevels = vibrationLevels;
    this.hydraulicPressure = hydraulicPressure;
    this.lubricantLevel = lubricantLevel;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return turbineId;
    case 2: return timestamp;
    case 3: return windDirection;
    case 4: return windSpeed;
    case 5: return rotorSpeed;
    case 6: return yawAngle;
    case 7: return pitchAngle;
    case 8: return powerOutput;
    case 9: return reactivePower;
    case 10: return gridFrequency;
    case 11: return voltage;
    case 12: return current;
    case 13: return vibrationLevels;
    case 14: return hydraulicPressure;
    case 15: return lubricantLevel;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: turbineId = (java.lang.Long)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: windDirection = (java.lang.Double)value$; break;
    case 4: windSpeed = (java.lang.Double)value$; break;
    case 5: rotorSpeed = (java.lang.Double)value$; break;
    case 6: yawAngle = (java.lang.Double)value$; break;
    case 7: pitchAngle = (java.lang.Double)value$; break;
    case 8: powerOutput = (java.lang.Double)value$; break;
    case 9: reactivePower = (java.lang.Double)value$; break;
    case 10: gridFrequency = (java.lang.Float)value$; break;
    case 11: voltage = (java.lang.Double)value$; break;
    case 12: current = (java.lang.Double)value$; break;
    case 13: vibrationLevels = (java.lang.Double)value$; break;
    case 14: hydraulicPressure = (java.lang.Double)value$; break;
    case 15: lubricantLevel = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'turbineId' field.
   * @return The value of the 'turbineId' field.
   */
  public long getTurbineId() {
    return turbineId;
  }


  /**
   * Sets the value of the 'turbineId' field.
   * @param value the value to set.
   */
  public void setTurbineId(long value) {
    this.turbineId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'windDirection' field.
   * @return The value of the 'windDirection' field.
   */
  public double getWindDirection() {
    return windDirection;
  }


  /**
   * Sets the value of the 'windDirection' field.
   * @param value the value to set.
   */
  public void setWindDirection(double value) {
    this.windDirection = value;
  }

  /**
   * Gets the value of the 'windSpeed' field.
   * @return The value of the 'windSpeed' field.
   */
  public double getWindSpeed() {
    return windSpeed;
  }


  /**
   * Sets the value of the 'windSpeed' field.
   * @param value the value to set.
   */
  public void setWindSpeed(double value) {
    this.windSpeed = value;
  }

  /**
   * Gets the value of the 'rotorSpeed' field.
   * @return The value of the 'rotorSpeed' field.
   */
  public double getRotorSpeed() {
    return rotorSpeed;
  }


  /**
   * Sets the value of the 'rotorSpeed' field.
   * @param value the value to set.
   */
  public void setRotorSpeed(double value) {
    this.rotorSpeed = value;
  }

  /**
   * Gets the value of the 'yawAngle' field.
   * @return The value of the 'yawAngle' field.
   */
  public double getYawAngle() {
    return yawAngle;
  }


  /**
   * Sets the value of the 'yawAngle' field.
   * @param value the value to set.
   */
  public void setYawAngle(double value) {
    this.yawAngle = value;
  }

  /**
   * Gets the value of the 'pitchAngle' field.
   * @return The value of the 'pitchAngle' field.
   */
  public double getPitchAngle() {
    return pitchAngle;
  }


  /**
   * Sets the value of the 'pitchAngle' field.
   * @param value the value to set.
   */
  public void setPitchAngle(double value) {
    this.pitchAngle = value;
  }

  /**
   * Gets the value of the 'powerOutput' field.
   * @return The value of the 'powerOutput' field.
   */
  public double getPowerOutput() {
    return powerOutput;
  }


  /**
   * Sets the value of the 'powerOutput' field.
   * @param value the value to set.
   */
  public void setPowerOutput(double value) {
    this.powerOutput = value;
  }

  /**
   * Gets the value of the 'reactivePower' field.
   * @return The value of the 'reactivePower' field.
   */
  public double getReactivePower() {
    return reactivePower;
  }


  /**
   * Sets the value of the 'reactivePower' field.
   * @param value the value to set.
   */
  public void setReactivePower(double value) {
    this.reactivePower = value;
  }

  /**
   * Gets the value of the 'gridFrequency' field.
   * @return The value of the 'gridFrequency' field.
   */
  public float getGridFrequency() {
    return gridFrequency;
  }


  /**
   * Sets the value of the 'gridFrequency' field.
   * @param value the value to set.
   */
  public void setGridFrequency(float value) {
    this.gridFrequency = value;
  }

  /**
   * Gets the value of the 'voltage' field.
   * @return The value of the 'voltage' field.
   */
  public double getVoltage() {
    return voltage;
  }


  /**
   * Sets the value of the 'voltage' field.
   * @param value the value to set.
   */
  public void setVoltage(double value) {
    this.voltage = value;
  }

  /**
   * Gets the value of the 'current' field.
   * @return The value of the 'current' field.
   */
  public double getCurrent() {
    return current;
  }


  /**
   * Sets the value of the 'current' field.
   * @param value the value to set.
   */
  public void setCurrent(double value) {
    this.current = value;
  }

  /**
   * Gets the value of the 'vibrationLevels' field.
   * @return The value of the 'vibrationLevels' field.
   */
  public double getVibrationLevels() {
    return vibrationLevels;
  }


  /**
   * Sets the value of the 'vibrationLevels' field.
   * @param value the value to set.
   */
  public void setVibrationLevels(double value) {
    this.vibrationLevels = value;
  }

  /**
   * Gets the value of the 'hydraulicPressure' field.
   * @return The value of the 'hydraulicPressure' field.
   */
  public double getHydraulicPressure() {
    return hydraulicPressure;
  }


  /**
   * Sets the value of the 'hydraulicPressure' field.
   * @param value the value to set.
   */
  public void setHydraulicPressure(double value) {
    this.hydraulicPressure = value;
  }

  /**
   * Gets the value of the 'lubricantLevel' field.
   * @return The value of the 'lubricantLevel' field.
   */
  public double getLubricantLevel() {
    return lubricantLevel;
  }


  /**
   * Sets the value of the 'lubricantLevel' field.
   * @param value the value to set.
   */
  public void setLubricantLevel(double value) {
    this.lubricantLevel = value;
  }

  /**
   * Creates a new TurbineData RecordBuilder.
   * @return A new TurbineData RecordBuilder
   */
  public static TurbineData.Builder newBuilder() {
    return new TurbineData.Builder();
  }

  /**
   * Creates a new TurbineData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TurbineData RecordBuilder
   */
  public static TurbineData.Builder newBuilder(TurbineData.Builder other) {
    if (other == null) {
      return new TurbineData.Builder();
    } else {
      return new TurbineData.Builder(other);
    }
  }

  /**
   * Creates a new TurbineData RecordBuilder by copying an existing TurbineData instance.
   * @param other The existing instance to copy.
   * @return A new TurbineData RecordBuilder
   */
  public static TurbineData.Builder newBuilder(TurbineData other) {
    if (other == null) {
      return new TurbineData.Builder();
    } else {
      return new TurbineData.Builder(other);
    }
  }

  /**
   * RecordBuilder for TurbineData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TurbineData>
    implements org.apache.avro.data.RecordBuilder<TurbineData> {

    private long id;
    private long turbineId;
    private long timestamp;
    private double windDirection;
    private double windSpeed;
    private double rotorSpeed;
    private double yawAngle;
    private double pitchAngle;
    private double powerOutput;
    private double reactivePower;
    private float gridFrequency;
    private double voltage;
    private double current;
    private double vibrationLevels;
    private double hydraulicPressure;
    private double lubricantLevel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(TurbineData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.turbineId)) {
        this.turbineId = data().deepCopy(fields()[1].schema(), other.turbineId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.windDirection)) {
        this.windDirection = data().deepCopy(fields()[3].schema(), other.windDirection);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.windSpeed)) {
        this.windSpeed = data().deepCopy(fields()[4].schema(), other.windSpeed);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.rotorSpeed)) {
        this.rotorSpeed = data().deepCopy(fields()[5].schema(), other.rotorSpeed);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.yawAngle)) {
        this.yawAngle = data().deepCopy(fields()[6].schema(), other.yawAngle);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.pitchAngle)) {
        this.pitchAngle = data().deepCopy(fields()[7].schema(), other.pitchAngle);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.powerOutput)) {
        this.powerOutput = data().deepCopy(fields()[8].schema(), other.powerOutput);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.reactivePower)) {
        this.reactivePower = data().deepCopy(fields()[9].schema(), other.reactivePower);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.gridFrequency)) {
        this.gridFrequency = data().deepCopy(fields()[10].schema(), other.gridFrequency);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.voltage)) {
        this.voltage = data().deepCopy(fields()[11].schema(), other.voltage);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.current)) {
        this.current = data().deepCopy(fields()[12].schema(), other.current);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.vibrationLevels)) {
        this.vibrationLevels = data().deepCopy(fields()[13].schema(), other.vibrationLevels);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.hydraulicPressure)) {
        this.hydraulicPressure = data().deepCopy(fields()[14].schema(), other.hydraulicPressure);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.lubricantLevel)) {
        this.lubricantLevel = data().deepCopy(fields()[15].schema(), other.lubricantLevel);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing TurbineData instance
     * @param other The existing instance to copy.
     */
    private Builder(TurbineData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.turbineId)) {
        this.turbineId = data().deepCopy(fields()[1].schema(), other.turbineId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.windDirection)) {
        this.windDirection = data().deepCopy(fields()[3].schema(), other.windDirection);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.windSpeed)) {
        this.windSpeed = data().deepCopy(fields()[4].schema(), other.windSpeed);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rotorSpeed)) {
        this.rotorSpeed = data().deepCopy(fields()[5].schema(), other.rotorSpeed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.yawAngle)) {
        this.yawAngle = data().deepCopy(fields()[6].schema(), other.yawAngle);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pitchAngle)) {
        this.pitchAngle = data().deepCopy(fields()[7].schema(), other.pitchAngle);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.powerOutput)) {
        this.powerOutput = data().deepCopy(fields()[8].schema(), other.powerOutput);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.reactivePower)) {
        this.reactivePower = data().deepCopy(fields()[9].schema(), other.reactivePower);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.gridFrequency)) {
        this.gridFrequency = data().deepCopy(fields()[10].schema(), other.gridFrequency);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.voltage)) {
        this.voltage = data().deepCopy(fields()[11].schema(), other.voltage);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.current)) {
        this.current = data().deepCopy(fields()[12].schema(), other.current);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.vibrationLevels)) {
        this.vibrationLevels = data().deepCopy(fields()[13].schema(), other.vibrationLevels);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.hydraulicPressure)) {
        this.hydraulicPressure = data().deepCopy(fields()[14].schema(), other.hydraulicPressure);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.lubricantLevel)) {
        this.lubricantLevel = data().deepCopy(fields()[15].schema(), other.lubricantLevel);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public TurbineData.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public TurbineData.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'turbineId' field.
      * @return The value.
      */
    public long getTurbineId() {
      return turbineId;
    }


    /**
      * Sets the value of the 'turbineId' field.
      * @param value The value of 'turbineId'.
      * @return This builder.
      */
    public TurbineData.Builder setTurbineId(long value) {
      validate(fields()[1], value);
      this.turbineId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'turbineId' field has been set.
      * @return True if the 'turbineId' field has been set, false otherwise.
      */
    public boolean hasTurbineId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'turbineId' field.
      * @return This builder.
      */
    public TurbineData.Builder clearTurbineId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public TurbineData.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public TurbineData.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'windDirection' field.
      * @return The value.
      */
    public double getWindDirection() {
      return windDirection;
    }


    /**
      * Sets the value of the 'windDirection' field.
      * @param value The value of 'windDirection'.
      * @return This builder.
      */
    public TurbineData.Builder setWindDirection(double value) {
      validate(fields()[3], value);
      this.windDirection = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'windDirection' field has been set.
      * @return True if the 'windDirection' field has been set, false otherwise.
      */
    public boolean hasWindDirection() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'windDirection' field.
      * @return This builder.
      */
    public TurbineData.Builder clearWindDirection() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'windSpeed' field.
      * @return The value.
      */
    public double getWindSpeed() {
      return windSpeed;
    }


    /**
      * Sets the value of the 'windSpeed' field.
      * @param value The value of 'windSpeed'.
      * @return This builder.
      */
    public TurbineData.Builder setWindSpeed(double value) {
      validate(fields()[4], value);
      this.windSpeed = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'windSpeed' field has been set.
      * @return True if the 'windSpeed' field has been set, false otherwise.
      */
    public boolean hasWindSpeed() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'windSpeed' field.
      * @return This builder.
      */
    public TurbineData.Builder clearWindSpeed() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'rotorSpeed' field.
      * @return The value.
      */
    public double getRotorSpeed() {
      return rotorSpeed;
    }


    /**
      * Sets the value of the 'rotorSpeed' field.
      * @param value The value of 'rotorSpeed'.
      * @return This builder.
      */
    public TurbineData.Builder setRotorSpeed(double value) {
      validate(fields()[5], value);
      this.rotorSpeed = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'rotorSpeed' field has been set.
      * @return True if the 'rotorSpeed' field has been set, false otherwise.
      */
    public boolean hasRotorSpeed() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'rotorSpeed' field.
      * @return This builder.
      */
    public TurbineData.Builder clearRotorSpeed() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'yawAngle' field.
      * @return The value.
      */
    public double getYawAngle() {
      return yawAngle;
    }


    /**
      * Sets the value of the 'yawAngle' field.
      * @param value The value of 'yawAngle'.
      * @return This builder.
      */
    public TurbineData.Builder setYawAngle(double value) {
      validate(fields()[6], value);
      this.yawAngle = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'yawAngle' field has been set.
      * @return True if the 'yawAngle' field has been set, false otherwise.
      */
    public boolean hasYawAngle() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'yawAngle' field.
      * @return This builder.
      */
    public TurbineData.Builder clearYawAngle() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'pitchAngle' field.
      * @return The value.
      */
    public double getPitchAngle() {
      return pitchAngle;
    }


    /**
      * Sets the value of the 'pitchAngle' field.
      * @param value The value of 'pitchAngle'.
      * @return This builder.
      */
    public TurbineData.Builder setPitchAngle(double value) {
      validate(fields()[7], value);
      this.pitchAngle = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'pitchAngle' field has been set.
      * @return True if the 'pitchAngle' field has been set, false otherwise.
      */
    public boolean hasPitchAngle() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'pitchAngle' field.
      * @return This builder.
      */
    public TurbineData.Builder clearPitchAngle() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'powerOutput' field.
      * @return The value.
      */
    public double getPowerOutput() {
      return powerOutput;
    }


    /**
      * Sets the value of the 'powerOutput' field.
      * @param value The value of 'powerOutput'.
      * @return This builder.
      */
    public TurbineData.Builder setPowerOutput(double value) {
      validate(fields()[8], value);
      this.powerOutput = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'powerOutput' field has been set.
      * @return True if the 'powerOutput' field has been set, false otherwise.
      */
    public boolean hasPowerOutput() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'powerOutput' field.
      * @return This builder.
      */
    public TurbineData.Builder clearPowerOutput() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'reactivePower' field.
      * @return The value.
      */
    public double getReactivePower() {
      return reactivePower;
    }


    /**
      * Sets the value of the 'reactivePower' field.
      * @param value The value of 'reactivePower'.
      * @return This builder.
      */
    public TurbineData.Builder setReactivePower(double value) {
      validate(fields()[9], value);
      this.reactivePower = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'reactivePower' field has been set.
      * @return True if the 'reactivePower' field has been set, false otherwise.
      */
    public boolean hasReactivePower() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'reactivePower' field.
      * @return This builder.
      */
    public TurbineData.Builder clearReactivePower() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'gridFrequency' field.
      * @return The value.
      */
    public float getGridFrequency() {
      return gridFrequency;
    }


    /**
      * Sets the value of the 'gridFrequency' field.
      * @param value The value of 'gridFrequency'.
      * @return This builder.
      */
    public TurbineData.Builder setGridFrequency(float value) {
      validate(fields()[10], value);
      this.gridFrequency = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'gridFrequency' field has been set.
      * @return True if the 'gridFrequency' field has been set, false otherwise.
      */
    public boolean hasGridFrequency() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'gridFrequency' field.
      * @return This builder.
      */
    public TurbineData.Builder clearGridFrequency() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'voltage' field.
      * @return The value.
      */
    public double getVoltage() {
      return voltage;
    }


    /**
      * Sets the value of the 'voltage' field.
      * @param value The value of 'voltage'.
      * @return This builder.
      */
    public TurbineData.Builder setVoltage(double value) {
      validate(fields()[11], value);
      this.voltage = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'voltage' field has been set.
      * @return True if the 'voltage' field has been set, false otherwise.
      */
    public boolean hasVoltage() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'voltage' field.
      * @return This builder.
      */
    public TurbineData.Builder clearVoltage() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'current' field.
      * @return The value.
      */
    public double getCurrent() {
      return current;
    }


    /**
      * Sets the value of the 'current' field.
      * @param value The value of 'current'.
      * @return This builder.
      */
    public TurbineData.Builder setCurrent(double value) {
      validate(fields()[12], value);
      this.current = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'current' field has been set.
      * @return True if the 'current' field has been set, false otherwise.
      */
    public boolean hasCurrent() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'current' field.
      * @return This builder.
      */
    public TurbineData.Builder clearCurrent() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'vibrationLevels' field.
      * @return The value.
      */
    public double getVibrationLevels() {
      return vibrationLevels;
    }


    /**
      * Sets the value of the 'vibrationLevels' field.
      * @param value The value of 'vibrationLevels'.
      * @return This builder.
      */
    public TurbineData.Builder setVibrationLevels(double value) {
      validate(fields()[13], value);
      this.vibrationLevels = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'vibrationLevels' field has been set.
      * @return True if the 'vibrationLevels' field has been set, false otherwise.
      */
    public boolean hasVibrationLevels() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'vibrationLevels' field.
      * @return This builder.
      */
    public TurbineData.Builder clearVibrationLevels() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'hydraulicPressure' field.
      * @return The value.
      */
    public double getHydraulicPressure() {
      return hydraulicPressure;
    }


    /**
      * Sets the value of the 'hydraulicPressure' field.
      * @param value The value of 'hydraulicPressure'.
      * @return This builder.
      */
    public TurbineData.Builder setHydraulicPressure(double value) {
      validate(fields()[14], value);
      this.hydraulicPressure = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'hydraulicPressure' field has been set.
      * @return True if the 'hydraulicPressure' field has been set, false otherwise.
      */
    public boolean hasHydraulicPressure() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'hydraulicPressure' field.
      * @return This builder.
      */
    public TurbineData.Builder clearHydraulicPressure() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'lubricantLevel' field.
      * @return The value.
      */
    public double getLubricantLevel() {
      return lubricantLevel;
    }


    /**
      * Sets the value of the 'lubricantLevel' field.
      * @param value The value of 'lubricantLevel'.
      * @return This builder.
      */
    public TurbineData.Builder setLubricantLevel(double value) {
      validate(fields()[15], value);
      this.lubricantLevel = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'lubricantLevel' field has been set.
      * @return True if the 'lubricantLevel' field has been set, false otherwise.
      */
    public boolean hasLubricantLevel() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'lubricantLevel' field.
      * @return This builder.
      */
    public TurbineData.Builder clearLubricantLevel() {
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TurbineData build() {
      try {
        TurbineData record = new TurbineData();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.turbineId = fieldSetFlags()[1] ? this.turbineId : (java.lang.Long) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.windDirection = fieldSetFlags()[3] ? this.windDirection : (java.lang.Double) defaultValue(fields()[3]);
        record.windSpeed = fieldSetFlags()[4] ? this.windSpeed : (java.lang.Double) defaultValue(fields()[4]);
        record.rotorSpeed = fieldSetFlags()[5] ? this.rotorSpeed : (java.lang.Double) defaultValue(fields()[5]);
        record.yawAngle = fieldSetFlags()[6] ? this.yawAngle : (java.lang.Double) defaultValue(fields()[6]);
        record.pitchAngle = fieldSetFlags()[7] ? this.pitchAngle : (java.lang.Double) defaultValue(fields()[7]);
        record.powerOutput = fieldSetFlags()[8] ? this.powerOutput : (java.lang.Double) defaultValue(fields()[8]);
        record.reactivePower = fieldSetFlags()[9] ? this.reactivePower : (java.lang.Double) defaultValue(fields()[9]);
        record.gridFrequency = fieldSetFlags()[10] ? this.gridFrequency : (java.lang.Float) defaultValue(fields()[10]);
        record.voltage = fieldSetFlags()[11] ? this.voltage : (java.lang.Double) defaultValue(fields()[11]);
        record.current = fieldSetFlags()[12] ? this.current : (java.lang.Double) defaultValue(fields()[12]);
        record.vibrationLevels = fieldSetFlags()[13] ? this.vibrationLevels : (java.lang.Double) defaultValue(fields()[13]);
        record.hydraulicPressure = fieldSetFlags()[14] ? this.hydraulicPressure : (java.lang.Double) defaultValue(fields()[14]);
        record.lubricantLevel = fieldSetFlags()[15] ? this.lubricantLevel : (java.lang.Double) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TurbineData>
    WRITER$ = (org.apache.avro.io.DatumWriter<TurbineData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TurbineData>
    READER$ = (org.apache.avro.io.DatumReader<TurbineData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeLong(this.turbineId);

    out.writeLong(this.timestamp);

    out.writeDouble(this.windDirection);

    out.writeDouble(this.windSpeed);

    out.writeDouble(this.rotorSpeed);

    out.writeDouble(this.yawAngle);

    out.writeDouble(this.pitchAngle);

    out.writeDouble(this.powerOutput);

    out.writeDouble(this.reactivePower);

    out.writeFloat(this.gridFrequency);

    out.writeDouble(this.voltage);

    out.writeDouble(this.current);

    out.writeDouble(this.vibrationLevels);

    out.writeDouble(this.hydraulicPressure);

    out.writeDouble(this.lubricantLevel);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.turbineId = in.readLong();

      this.timestamp = in.readLong();

      this.windDirection = in.readDouble();

      this.windSpeed = in.readDouble();

      this.rotorSpeed = in.readDouble();

      this.yawAngle = in.readDouble();

      this.pitchAngle = in.readDouble();

      this.powerOutput = in.readDouble();

      this.reactivePower = in.readDouble();

      this.gridFrequency = in.readFloat();

      this.voltage = in.readDouble();

      this.current = in.readDouble();

      this.vibrationLevels = in.readDouble();

      this.hydraulicPressure = in.readDouble();

      this.lubricantLevel = in.readDouble();

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.turbineId = in.readLong();
          break;

        case 2:
          this.timestamp = in.readLong();
          break;

        case 3:
          this.windDirection = in.readDouble();
          break;

        case 4:
          this.windSpeed = in.readDouble();
          break;

        case 5:
          this.rotorSpeed = in.readDouble();
          break;

        case 6:
          this.yawAngle = in.readDouble();
          break;

        case 7:
          this.pitchAngle = in.readDouble();
          break;

        case 8:
          this.powerOutput = in.readDouble();
          break;

        case 9:
          this.reactivePower = in.readDouble();
          break;

        case 10:
          this.gridFrequency = in.readFloat();
          break;

        case 11:
          this.voltage = in.readDouble();
          break;

        case 12:
          this.current = in.readDouble();
          break;

        case 13:
          this.vibrationLevels = in.readDouble();
          break;

        case 14:
          this.hydraulicPressure = in.readDouble();
          break;

        case 15:
          this.lubricantLevel = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










